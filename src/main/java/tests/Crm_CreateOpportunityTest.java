package tests;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import constants.FileConstants;
import pages.CRM_LeadsPage;
import pages.CRM_OpportunitiesPage;
import utils.CommonUtils;
import utils.ExcelUtils;
import utils.FileUtils;
import utils.WaitUtils;


public class Crm_CreateOpportunityTest extends BaseTest {
	public static Logger logger = LogManager.getLogger("Crm_CreateOpportunityTest");

	@Test(dataProvider = "opportunityData", dataProviderClass = CommonUtils.class,enabled = false)
	public void createOpportunityWithMandatoryFields(Map<String, String> data)
			throws InterruptedException, FileNotFoundException, IOException {
		CRM_OpportunitiesPage oppPage = hp.clickOpportunities();

		oppPage.clickCreateOpportunity();
		logger.info("Create Opportunity button is clicked");

		String oppName = data.get("Opportunity Name");
		String amount = data.get("Amount");
		String businessType = data.get("Business Type");
		String nextStep = data.get("Next Step");
		String salesStage = data.get("Sales Stage");
		String lead = data.get("Lead");

		// fill the form using Page Object methods
		oppPage.enterOpportunityName(oppName);
		logger.info("Opportunity name is entered");

		oppPage.enterAmount(amount);
		logger.info("Amount is entered");

		oppPage.enterBusinessType(businessType);
		logger.info("Business type is entered");

		oppPage.enterNextStep(nextStep);
		logger.info("Next step is entered");

		oppPage.enterSalesStage(salesStage);
		logger.info("Sales stage is entered");

		String value = FileUtils.readOpportunitiesPropertiesFile("search.dropdown.value2");
		oppPage.selectLead(value, lead);
		logger.info("lead is selected");

		oppPage.clickCreateOpportunityInForm();
		logger.info("opportunity is created");

		// validate Opportunity created
		Assert.assertTrue(oppPage.verifyOpportunityCreatedWithMandatoryFields(oppName), "Opportunity Creation failed.");
	}

	@Test(dataProvider = "tc2Data", dataProviderClass = CommonUtils.class,enabled = false)
	public void createOpportunityWithAllFields(Map<String, String> data) throws FileNotFoundException, IOException {
		CRM_OpportunitiesPage oppPage = hp.clickOpportunities();
		oppPage.clickCreateOpportunity();
		logger.info("Create Opportunity button is clicked");
		String oppName = data.get("Opportunity Name");
		String amount = data.get("Amount");
		String businessType = data.get("Business Type");
		String expectedClosedate = data.get("Expected Close Date");
		String assignedTo = data.get("Assigned To");
		String probability = data.get("Probability");
		String nextStep = data.get("Next Step");
		String salesStage = data.get("Sales Stage");
		String lead = data.get("Lead");
		String description = data.get("Description");

		// fill the form using Page Object methods
		oppPage.enterOpportunityName(oppName);
		logger.info("Opportunity name is entered");

		oppPage.enterAmount(amount);
		logger.info("Amount is entered");

		oppPage.enterBusinessType(businessType);
		logger.info("Business type is entered");

		oppPage.enterExpectedCloseDate(expectedClosedate);
		logger.info("expected close date is entered");

		oppPage.enterAssignedTo(assignedTo);
		logger.info("Assigned to is entered");

		oppPage.enterProbability(probability);
		logger.info("Probability is entered");

		oppPage.enterNextStep(nextStep);
		logger.info("Next step is entered");

		oppPage.enterSalesStage(salesStage);
		logger.info("Sales stage is entered");

		String value = FileUtils.readOpportunitiesPropertiesFile("search.dropdown.value2");
		oppPage.selectLead(value, lead);
		logger.info("lead is selected");

		oppPage.enterDescription(description);
		logger.info("description is entered");

		oppPage.clickCreateOpportunityInForm();
		logger.info("opportunity is created");

		// validate Opportunity created
		Assert.assertTrue(oppPage.verifyopportunityCreatedWithAllFields(oppName), "Opportunity Creation failed.");

	}

	@Test(dataProvider = "allOpportunitiesData", dataProviderClass = CommonUtils.class)
	public void verifyOpportunityIdIsAutoGeneratedAndUnique(List<Map<String, String>> dataList) throws FileNotFoundException, IOException {
		CRM_OpportunitiesPage oppPage = hp.clickOpportunities();
		String oppId1 = "", oppId2 = "";
		logger.info("Create Opportunity button is clicked");
		for (int i = 0; i < 2; i++) { // Only first 2 rows
			
			oppPage.clickCreateOpportunity();

	        Map<String, String> data = dataList.get(i);

		String oppName = data.get("Opportunity Name");
		String amount = data.get("Amount");
		String businessType = data.get("Business Type");
		String nextStep = data.get("Next Step");
		String salesStage = data.get("Sales Stage");
		String lead = data.get("Lead");

// fill the form using Page Object methods
		oppPage.enterOpportunityName(oppName);
		logger.info("Opportunity name is entered");

		oppPage.enterAmount(amount);
		logger.info("Amount is entered");

		oppPage.enterBusinessType(businessType);
		logger.info("Business type is entered");

		oppPage.enterNextStep(nextStep);
		logger.info("Next step is entered");

		oppPage.enterSalesStage(salesStage);
		logger.info("Sales stage is entered");

		String value = FileUtils.readOpportunitiesPropertiesFile("search.dropdown.value2");
		oppPage.selectLead(value, lead);
		logger.info("lead is selected");

		oppPage.clickCreateOpportunityInForm();
		logger.info("opportunity is created");
		
		oppPage.waitForOpportunityListOrSuccessMessage();
		logger.info("Success message is appeared");
		
		String currentId = oppPage.getOpportunityId();
        logger.info("Opportunity ID " + (i + 1) + ": " + currentId);

        Assert.assertNotNull(currentId, "Opportunity ID is null");
        Assert.assertFalse(currentId.isEmpty(), "OpportunityId is empty");
        Assert.assertFalse(oppPage.isOpportunityIdIsEditable(), "Opportunity id field should be non-editable");
		hp.clickOpportunities();

        oppPage.waitForSuccessMessageToDisappear();
        
        if (i == 0) { 
        	oppId1 = currentId;
        }
        else oppId2 = currentId;
		}
		
	    Assert.assertNotEquals(oppId1, oppId2, "Opportunity IDs should be unique");

}
}
