package tests;

import org.openqa.selenium.WebDriver;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

import listeners.ListenersCRM;
import pages.CRM_AddProductPage;
import pages.CRM_ProductsPage;

@Listeners(ListenersCRM.class)
public class Crm_ProductTest extends BaseTest {

	CRM_AddProductPage adp;

	@BeforeMethod
	public void setup() {
		WebDriver driver = getBrowser(); // getBrowser() method comes from BaseTest,
		// returning the current thread’s WebDriver instance — so you don’t need to
		// initialize it here.
		CRM_ProductsPage pp = hp.clickProducts();
		String actualProductsHeader = pp.getTextFromElement();
		System.out.println("the Products Page Header is: " + actualProductsHeader);
		Assert.assertEquals(actualProductsHeader, "Products");
		// CRM_AddProductPage ad=hp.clickAddProduct();
		adp = hp.clickAddProduct();

	}

	// Verify that Product ID is auto-generated
	@Test(enabled = false)
	public void verifyProductIdAutoGeneratedTC_01() {

		String actualAddProductHeader = adp.getTextFromElement();
		System.out.println(actualAddProductHeader);
		Assert.assertEquals(actualAddProductHeader, "Add Product");
		String txtbxActualValue = adp.verifyValueFromTextBox();
		String expectedValue = "Auto Generated";
		if (txtbxActualValue.equals(expectedValue)) {
			System.out.println("Test case is Passed");
		} else {
			System.out.println("Test case is Failed");
		}
	}

	// Verify that Product Name cannot be blank
	@Test(enabled = false)
	public void verifyProductNameCannotBlankTC_02() {

		String productName = " ";
		adp.enterProductName(productName);
		adp.clickOnAdd();
		String errorMsg = adp.errorProductNameValidationMsg();
		Assert.assertEquals(errorMsg, "Please fill out this field.");
//		if(errorMsg.equalsIgnoreCase("Please fill out this field.")) {
//			System.out.println("Test case is Passed");
//		}
//		else {
//			System.out.println("Test case is Failed");
//		}

	}


	// Verify that Product Name cannot be blank
	// Verify that Category must be selected

	@Test(enabled = false)
	public void verifyCategoryMustbeselectedTC03() {

		String productName = "Sofa";
		adp.enterProductName(productName);
		// adp.selectCategory();
		adp.clickOnAdd();
		String errorMsg = adp.errorSelectCategoryValidationMsg();
		Assert.assertEquals(errorMsg, "Please select an item in the list.");

	}
	// Verify Quantity defaults to 0 if left blank

	@Test(enabled = false)
	public void verifyDefaultQuantityMustbeselectedToZeroTC04() {

		String productName = "Sofa";
		adp.enterProductName(productName);
		adp.selectCategory(2);
		adp.clickOnAdd();
		String actValue = adp.verifyValueFrmQuantity();
		Assert.assertEquals(actValue, "0"); // by default 0
		String errorMsg = adp.errorQunatityValidationMsg();
		Assert.assertEquals(errorMsg, "Value must be greater than or equal to 1.");

	}
	// Verify Price Per Unit defaults to 0 if left blank

	@Test(enabled = false)
	public void verifyPricePerUnitDefaultsToZeroTC05() {
		String productName = "Sofa";
		adp.enterProductName(productName);
		adp.selectCategory(2);
		adp.enterQuantiy("1");
		adp.enterPrice(" ");
		adp.clickOnAdd();
		// String actValue =adp.verifyPricePerUnit();
		// Assert.assertEquals(actValue,"0.01"); //by default 0.01
		String errorMsg = adp.errorPriceValidationMsg();
		Assert.assertEquals(errorMsg, "Please fill out this field.");

	}

	// Verify that Vendor must be selected

	@Test(enabled = false)
	public void verifyVendorMustBeSelectedTC06() {
		String productName = "Sofa";
		adp.enterProductName(productName);
		adp.selectCategory(2);
		adp.enterQuantiy("1");
		adp.enterPrice("100");

		adp.clickOnAdd();
		String errorMsg = adp.errorVendorValidationMsg();
		Assert.assertEquals(errorMsg, "Please select an item in the list.");

	}
//Verify Quantity cannot be negative eg.-5

	@Test(enabled = false)
	public void verifyQuantityCanNotBeNegativeTC07() {
		String productName = "Sofa";
		adp.enterProductName(productName);
		adp.selectCategory(2);
		adp.enterQuantiy("-5");
		adp.enterPrice("100");
		adp.selectVendorByValue("VID_009");
		adp.clickOnAdd();
		String errorMsg = adp.errorQunatityValidationMsg();
		Assert.assertEquals(errorMsg, "Value must be greater than or equal to 1.");

	}
	// Verify Price Per Unit cannot be negative eg.-10

	@Test(enabled = false)
	public void verifyPriceCanNotBeNegativeTC08() {
		String productName = "Sofa";
		adp.enterProductName(productName);
		adp.selectCategory(2);
		adp.enterQuantiy("1");
		adp.enterPrice("-10");
		adp.selectVendorByValue("VID_009");
		adp.clickOnAdd();
		String errorMsg = adp.errorPriceValidationMsg();
		Assert.assertEquals(errorMsg, "Value must be greater than or equal to 0.01.");

	}

	// Verify Quantity accepts numeric values only
	@Test(enabled = false)
	public void verifyQuantityAcceptNumericValuesOnlyTC09() {
		String productName = "Sofa";
		adp.enterProductName(productName);
		adp.selectCategory(2);
		adp.enterQuantiy("e");
		adp.enterPrice("100");
		adp.selectVendorByValue("VID_009");
		adp.clickOnAdd();
		String errorMsg = adp.errorQunatityValidationMsg();
		Assert.assertEquals(errorMsg, "Please enter a number.");

	}

	// Verify Price accepts numeric values only
	@Test(enabled = false)
	public void verifyPriceAcceptNumericValuesOnlyTC10() {
		String productName = "Sofa";
		adp.enterProductName(productName);
		adp.selectCategory(2);
		adp.enterQuantiy("1");
		adp.enterPrice("e");
		adp.selectVendorByValue("VID_009");
		adp.clickOnAdd();
		String errorMsg = adp.errorPriceValidationMsg();
		Assert.assertEquals(errorMsg, "Please enter a number.");

	}

	// Verify successful product addition with all valid inputs

	@Test(dataProvider = "productData", enabled = false)
	public void verifySuccessfulProductAdditionWithAllValidInputsTC11(String prodName, int category, String qunty,
			String price, String vendor) throws InterruptedException {
		String productName = prodName + System.currentTimeMillis();

		adp.enterProductName(productName);
		adp.selectCategory(category);
		adp.enterQuantiy(qunty);
		adp.enterPrice(price);
		adp.selectVendorByValue(vendor);
		adp.clickOnAdd();
		String SuccessMsg = adp.successMsg();
		System.out.println(SuccessMsg);
		Assert.assertEquals(SuccessMsg, "Product " + productName + " Successfully Added");

	}

	@DataProvider(name = "productData")
	public Object[][] getData() {
		return new Object[][] { { "Sofa", 2, "2", "465", "VID_009" }

		};
	}

	// Verify duplicate product name and vendor are not allowed
	@Test(dataProvider = "productData", enabled = false)
	public void verifyDuplicateProductNameVendorAreNotAllowedTC12(String prodName, int category, String qunty,
			String price, String vendor) throws InterruptedException {

		adp.enterProductName(prodName);
		adp.selectCategory(category);
		adp.enterQuantiy(qunty);
		adp.enterPrice(price);
		adp.selectVendorByValue(vendor);
		adp.clickOnAdd();
		Thread.sleep(2000);
		String SuccessMsg = adp.successMsg();
		System.out.println(SuccessMsg);
		Assert.assertEquals(SuccessMsg, "The Project Name :" + prodName + " Already Exists");
		// The Project Name :sofa Already Exists

	}

	// Verify Category dropdown is populated
	@Test(enabled = false)
	public void verifyCategoryDropDwnIsPopulatedTC13() {
		int drpdwnSize = adp.verifyCategoryDrpDwn();
		if (drpdwnSize > 1) {
			System.out.println("Category Dropdown is populated with " + drpdwnSize + " options.");
		} else {
			System.out.println("Category Dropdown is NOT populated properly.");
		}

	}

	// Verify Vendor dropdown is populated



	@Test(enabled = false)
	public void verifyVendorDropDwnIsPopulatedTC14() {
		int drpdwnSize = adp.verifyVendorDrpDwn();
		System.out.println("Dropdwon options" + drpdwnSize);

		if (drpdwnSize > 1) {
			System.out.println("Vendor Dropdown is populated with " + drpdwnSize + " options.");
		} else {
			System.out.println("Vendor Dropdown is NOT populated properly.");
		}

	}


	// Verify Save/Add button adds product

	@Test(dataProvider = "productData", enabled = false)
	public void verifySaveOrAddButtonAddsProductTC15(String prodName, int category, String qunty, String price,
			String vendor) throws InterruptedException {

		String productName = prodName + System.currentTimeMillis();

		adp.enterProductName(productName);
		adp.selectCategory(category);
		adp.enterQuantiy(qunty);
		adp.enterPrice(price);
		adp.selectVendorByValue(vendor);
		adp.clickOnAdd();
		Thread.sleep(2000);
		String SuccessMsg = adp.successMsg();
		System.out.println(SuccessMsg);
		Thread.sleep(2000);
		Assert.assertEquals(SuccessMsg, "Product " + productName + " Successfully Added");

		 if(adp.isProductPresentInTable(productName)) {
			 System.out.println(productName +"Product Name is added in Products:PASS");
		 }
		 else{
			 System.out.println(productName +"Product Name is not added in Products:FAILED");
		 }
		
		

		System.out.println("Add button is working properly");
//		 if(adp.isProductPresentInTable(productName)) {
//			 System.out.println(productName +"Product Name is added in Products and Add button is working:PASS");
//		 }
//		 else{
//			 System.out.println(productName +"Product Name is not added in Products and Add button is not working:FAILED");
//		 }

	}
	// TC-16 Verify Cancel button clears the form or returns to list

	// Verify auto-generated Product ID is non-editable

	@Test(dataProvider = "productData", enabled = true)
	public void verifyAutoGeneratedProductIDIsNonEditableTC17(String prodName, int category, String qunty, String price,
			String vendor) throws InterruptedException {
		String productName = prodName + System.currentTimeMillis();
		adp.enterProductName(productName);
		adp.selectCategory(category);
		adp.enterQuantiy(qunty);
		adp.enterPrice(price);
		adp.selectVendorByValue(vendor);
		adp.clickOnAdd();

		String SuccessMsg = adp.successMsg();
		System.out.println(SuccessMsg);
		String value = "productName";
		adp.selectSearchProductByName(value);
		adp.searchProductName(productName);
		
		adp.clickOnEdit();
		Thread.sleep(3000);
		boolean result = adp.checkProductIDInputBoxReadOnly();
		System.out.println(result);

		if (result) {
			System.out.println("Input is non-editable");
		} else {
			System.out.println("Input is editable");
		}


	}

}
