package tests;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import org.openqa.selenium.WebDriver;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

import constants.FileConstants;
import listeners.ListenersCRM;

import pages.CRM_LeadsPage;
import utils.ExcelUtils;

@Listeners(ListenersCRM.class)

public class Crm_CreateLeadTest  extends BaseTest {
/*
	@DataProvider(name = "leadData")
    public Object[][] getLeadData() throws IOException {
        ExcelUtils excel = new ExcelUtils(FileConstants.LEADTESTDATA_FILE_UPLOAD_PATH);
        int rows = excel.getRowCount("Sheet1");
        int cols = excel.getColumnCount("Sheet1");

        Object[][] data = new Object[rows - 1][cols]; // excluding header row

        for (int i = 1; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                data[i - 1][j] = excel.getCellData("Sheet1", i, j);
            }
        }

        excel.close();
        return data;
    }
	*/
//	**************************************************
	
	@DataProvider(name = "leadData")
	public Object[][] leadData() {
	    return new Object[][]{
	        // leadName,      company,      leadSource, industry,   phone,       leadStatus, campaignID
	        {"Madhu Sahu",   "Test Automation",  "Web",      "IT",       "9876543210", "Open",     "CAM00003"}
	     
	    };
	}
	
@Test(priority=1, description = "Create a new lead with mandatory fields only",enabled=true,dataProvider = "leadData")
    public void createLeadWithMandatoryFeilds(String leadName, String company, String leadSource, String industry, String phone, String leadStatus, String campaignID) throws InterruptedException {
      
	//getBrowser() method comes from Crm_BaseTest, 
    //returning the current thread’s WebDriver instance — so you don’t need to initialize it here.
	
	WebDriver driver = getBrowser(); 
	
	//navigates from hme page and clicks on the click leads method and driver is set to the lead page  
    
	CRM_LeadsPage lp = hp.clickLeads();//navigates from hme page and clicks on the click leads method and driver is set to the lead page
      
   // Click on Create Lead
   
	lp.clickCreateLeadButtonAndGetTitle(); // Clicks on the Create Lead button and waits for the title to change
     
   // Fill in mandatory fields only
    lp.enterLeadName(leadName);
    lp.enterCompany(company);
    lp.enterLeadSource(leadSource);
    lp.enterIndustry(industry);
    lp.enterPhone(phone);
    lp.enterLeadStatus(leadStatus);
    lp.lookupCampaign(campaignID);
    
    //Create lead button is clicked to save the lead
    lp.SaveLeadButton();
 
    }

//*************************************************	

@Test(priority=2, description = "Ensure lead creation with all optional and mandatory fields filled", enabled=false,dataProvider = "leadData")
	public void createLeadwithOptionalFeilds() {
		
	}
//*************************************************
//Sceanrio works
	@Test(priority=3, description = "Ensure Lead ID is auto-generated and unique for each lead", enabled=false)//dependsOnMethods = "createLeadWithMandatoryFeilds")
	public void leadIDAutogenerated(String leadName) throws InterruptedException, IOException {
		WebDriver driver = getBrowser(); 
	    CRM_LeadsPage lp = hp.clickLeads();
	   // String leadName = "TestLead" ;
	    System.out.println("Lead Name: " + leadName);

	    String leadId = lp.getLeadId(leadName);
	    
	    System.out.println("Generated Lead ID: " + leadId);
	     
	    // Verify that the Lead ID is not null or empty
	    if (leadId != null && !leadId.isEmpty()) {
	        System.out.println("Lead ID is auto-generated and unique: " + leadId);
	    } else {
	        System.out.println("Lead ID is not generated correctly.");
	        throw new AssertionError("Lead ID is not generated correctly.");
	    }
		
	}
	//**************************************************
	@DataProvider(name = "phoneValidationInline")
	public Object[][] phoneValidationInline() {
	    return new Object[][]{
	            {"1234567890", true},       // Valid: numeric
	            {"abc123", false},          // Invalid: alphanumeric
	            {"!@#$$%", false},          // Invalid: special chars
	      
	    };
	}
	@Test(priority=5, description = "Verify Phone field accepts numeric input only", enabled=false,dataProvider = "phoneValidationInline")
    	public void verifyPhoneField(String phoneInput, boolean shouldAccept) throws InterruptedException, IOException {
		WebDriver driver = getBrowser(); 
	    CRM_LeadsPage lp = hp.clickLeads();
	    lp.clickCreateLeadButtonAndGetTitle();
	     System.out.println("Phone: " + phoneInput);
         String enteredPhone = lp.enterPhone(phoneInput);
         System.out.println("Entered Phone: " + enteredPhone);
         // Verify that the phone number is numeric and matches the entered value
         if (shouldAccept) {
			Assert.assertTrue(enteredPhone.matches("\\d+"), "Phone field should accept numeric input only. Entered: " + enteredPhone);
         } else {
        	 Assert.assertFalse(enteredPhone.matches("\\d+"), "Phone field should not accept non-numeric input. Entered: " + enteredPhone);
         }
	  }
	//**************************************************
	@DataProvider(name = "AnnualRevenueValidation")
	public Object[][] annualRevenueValidation() {
	    return new Object[][]{
	            {"1000000", true},       // Valid: numeric
	            {"abc123", false},      // Invalid: alphanumeric
	            {"!@#$$%", false},      // Invalid: special chars
	    };
	}
	@Test(priority=6, description = "Ensure Annual Revenue accepts numeric values", enabled=false)
	public void verifyAnnualRevenueField(String RevenueInput,boolean shouldAccept	 ) throws InterruptedException, IOException {
		WebDriver driver = getBrowser(); 
	    CRM_LeadsPage lp = hp.clickLeads();
	    lp.clickCreateLeadButtonAndGetTitle();
	    
	    // Test with a valid numeric value
	    String annualRevenue = lp.enterAnnualRevenue(RevenueInput);
	    System.out.println("Entered Annual Revenue: " + annualRevenue);
	    // Verify that the annual revenue is numeric and matches the entered value
	    if (shouldAccept) {
	        Assert.assertTrue(annualRevenue.matches("\\d+"), "Annual Revenue field should accept numeric input only. Entered: " + annualRevenue);
	    } else {
	        Assert.assertFalse(annualRevenue.matches("\\d+"), "Annual Revenue field should not accept non-numeric input. Entered: " + annualRevenue);
	    }
	}
	//**************************************************
	@DataProvider(name = "LeadisMandatory")
	public Object[][] leadCreationData() {
	    return new Object[][]{
	        // leadName,       company,      leadSource, industry,  phone,       leadStatus, campaignID
	         {"",              "Oil and Gas",  "Phone",    "Retail",  "5551234567", "Open",     "CAMP00003"}, // Missing leadName (should fail)
	    };
	}
	@Test(priority=7, description = "Ensure Lead name is mandatory", enabled=false, dataProvider = "LeadisMandatory")
	public void createLeadWithVariousData(String leadName, String company, String leadSource, String industry, String phone, String leadStatus, String campaignID) throws InterruptedException {
	    WebDriver driver = getBrowser();
	    CRM_LeadsPage lp = hp.clickLeads();
	    lp.clickCreateLeadButtonAndGetTitle();

	    System.out.println("Creating lead with: " + leadName + ", " + company + ", " + leadSource);

	    lp.enterLeadName(leadName);
	    lp.enterCompany(company);
	    lp.enterLeadSource(leadSource);
	    lp.enterIndustry(industry);
	    lp.enterPhone(phone);
	    lp.enterLeadStatus(leadStatus);
	    lp.lookupCampaign(campaignID);
	    lp.SaveLeadButton();


}
}