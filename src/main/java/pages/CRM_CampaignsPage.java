package pages;

import org.openqa.selenium.WebDriver;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.PublicKey;
import java.util.List;
import java.util.Set;
import org.apache.xmlbeans.impl.xb.xsdschema.Public;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.ElementClickInterceptedException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.Select;
import constants.FileConstants;
import utils.CommonUtils;
import utils.FileUtils;
import utils.WaitUtils;

public class CRM_CampaignsPage extends BasePage {

	// Constructor
	public CRM_CampaignsPage(WebDriver driver) {
		super(driver);
	}

	@FindBy(xpath = "//b[text()='Campaigns']")
	public WebElement Campaign_label;

	@FindBy(xpath = "//a[text()='Campaigns']")
	public WebElement Campaign_Button;

	@FindBy(xpath = "//button[contains(@class,'btn')]") // "//button[contains(@class,'btn') and
	public WebElement Campaign_Form_button;

	@FindBy(xpath = "//div[@class='form-wrapper']/h3[1]")
	public WebElement Create_Campaign_Label;

	@FindBy(xpath = "//div[@class='form-group']/input[@name='campaignId']") // "//input[@name='campaignId]")
	public WebElement Autogenerated_id_inputBox;

	@FindBy(xpath = "//table[@class='table table-striped table-hover']/tbody/tr[1]/td[1]")
	public WebElement AutoGenerated_CampaignId;

	@FindBy(xpath = "//table[@class='table table-striped table-hover']/tbody/tr[1]/td[2]")
	public WebElement AutoGenerated_CampaignName;

	@FindBy(xpath = "//table[@class='table table-striped table-hover']/tbody/tr[1]/td[5]")
	public WebElement AutoGenerated_CampaigSize;

	@FindBy(xpath = "//tr[@class='tr']/td[5]")
	public WebElement Auto_Target_size;

	@FindBy(xpath = "//div[@class='form-group']/input[@name='campaignName']") // "//input[@name='campaignName]")
	public WebElement Campaign_Name;

	@FindBy(xpath = "//tr[@class='tr']/td[2])")
	public WebElement Auto_Name;

	@FindBy(xpath = "//input[@type='text'and @name='campaignStatus']")
	public WebElement Campaign_Status;

	@FindBy(xpath = "//div[@class='form-group']/input[@name='targetSize']") // "//input[@name='targetSize]")
	public WebElement campaignSize;

	@FindBy(xpath = "//input[@type='text'and @name='targetAudience']")
	public WebElement targetAudience;

	@FindBy(xpath = "//textarea[@name='description']")
	public WebElement Description;

	@FindBy(xpath = "//button[@type='submit']")
	public WebElement Submit_button;

	@FindBy(xpath = "//table [contains (@class,'table table-striped table-hover')]")
	public List<WebElement> Table_contents;

	@FindBy(xpath = "//input[@class='btn btn-default']")
	public List<WebElement> DeleteCampaign_Cancel;

	@FindBy(xpath = "//input[@class='btn btn-danger']")
	public List<WebElement> Delete_Campaign;

	@FindBy(xpath = "//*[text()='Delete Campaign']")
	public List<WebElement> Delete_Campaign_Label;

	@FindBy(xpath = "//div[@class='Toastify__toast-body' and @role='alert']")
	public WebElement alertTip;

	@FindBy(xpath = "//table[@class='table table-striped table-hover']")
	public WebElement table_ID;

	@FindBy(xpath = "//table[@class='table table-striped table-hover']/thead/tr/th")
	public List<WebElement> table_Cols;
	
	@FindBy(xpath = "//*[@id='content']/div[2]/div[1]/div/table/tbody/tr[1]/td[7]/a[1]/i")
	public WebElement editBtn;
	
	@FindBy(xpath="//button[@type='submit']")
	public WebElement update_Campaign;

	public void user_on_campaignPage() {

		if (Campaign_label.isDisplayed()) {
			System.out.println("you are on 1 Campaign Page");
			driver.manage().window().maximize();
			WaitUtils.waitForElement(driver, Campaign_Form_button);
			Campaign_Form_button.click();
			System.out.println(" User clicked Create Campaign button");
			WaitUtils.waitForElement(driver, Campaign_Name);
			System.out.println(" You are on new Campaign Form page");
		}
	}

	public String getValueAttribute(WebElement element) {
		return element.getAttribute("value");
	}

	/*
	 * public String Get_Alert(WebDriver driver) {
	 * 
	 * Alert alert = driver.switchTo().alert(); String alert_msg = alert.getText();
	 * System.out.println(" Alert message: " + alert_msg); return null;
	 * 
	 * }
	 */

	public void filling_the_Form(WebDriver driver, String name, String status, String size, String audience,
			String descr) {

		user_on_campaignPage();
		WaitUtils.waitForElement(driver, Campaign_Form_button);
		Campaign_Form_button.click();
		WaitUtils.waitForElement(driver, Campaign_Name);
		Campaign_Name.sendKeys(name);
		Campaign_Status.sendKeys(status);
		campaignSize.sendKeys(size);
		targetAudience.sendKeys(audience);
		Description.sendKeys(descr);
		Submit_button.submit();
		System.out.println(" Submit button clicked successfully");
		WaitUtils.waitForElement(driver, Campaign_Button);
		System.out.println("you are on Campaign Page");
		Alert_Message();
		System.out.println(" New Campaign Created successfully!");

	}

	public void Alert_Message() {
		if (WaitUtils.waitForElement(driver, alertTip)) {
			System.out.println(" Alert appeared");
			String AlertMessage = alertTip.getText();
			System.out.println(" Alert Message: " + AlertMessage);
			WaitUtils.waitForElementToDisappear(driver, alertTip);
		}
	}

	public void Autogenerated_ID(WebDriver driver, String name, String Asize)
			throws FileNotFoundException, IOException {

		// driver.manage().window().maximize();
		user_on_campaignPage();
		if (WaitUtils.waitForElement(driver, Campaign_Name))
			Campaign_Name.sendKeys(name);
		System.out.println(" Name entered");
		campaignSize.sendKeys(Asize);
		System.out.println(" Size entered");
		Submit_button.click();
		System.out.println(" You clicked submit button");
		Alert_Message();
		WaitUtils.waitForElement(driver, table_ID);
		String AId = AutoGenerated_CampaignId.getText();
		String AName = AutoGenerated_CampaignName.getText();
		String ASZ = AutoGenerated_CampaigSize.getText();
		System.out.println(" Auto generated Campaign ID is: " + AId + " for Campaign name: " + AName + " for " + ASZ);

	}

	public void read_TableContent() throws FileNotFoundException, IOException {

		String[] ExpectedColumns = FileUtils.readCampaignPropertiesFile("campaigndisplay.options").split(",");
		WaitUtils.waitForElement(driver, table_ID);
		System.out.println(" Elements of the columns: " + table_Cols.size());
		for (int r = 1; r <= table_Cols.size(); r++) {
			WebElement col_Names = driver
					.findElement(By.xpath("//table[@class='table table-striped table-hover']/thead/tr/th[" + r + "]"));
			// System.out.println("Column Names: " + col_Names.getText());
			for (int i = 0; i < ExpectedColumns.length; i++) {
				if (col_Names.getText().equals(ExpectedColumns[i])) {
					System.out.println(
							" Expected Columns: " + ExpectedColumns[i] + "  Actual Columns: " + col_Names.getText());
				}
			}
		}
	}

	public boolean check_CampainName(String Asize) {
		boolean c_Name = false;
		user_on_campaignPage();
		if (WaitUtils.waitForElement(driver, Campaign_Name)) {
			Campaign_Name.sendKeys("");
			System.out.println(" Name Field is empty");
			campaignSize.sendKeys(Asize);
			System.out.println(" Size entered");
			Submit_button.click();
			System.out.println(" You clicked submit button");
			String emptyField = getErrorMessage(Campaign_Name);
			System.out.println(" Tooltip for empty field: " + emptyField);
			c_Name = true;
		}
		return c_Name;
	}


	public void Verify_Expected_closedate_format() {

	}

	public boolean Check_Status_optional(String name, String Asize) {

		boolean Stat = true;
		user_on_campaignPage();
		if (WaitUtils.waitForElement(driver, Campaign_Name)) {
			Campaign_Name.sendKeys(name);
			System.out.println(" Name is entered");
			campaignSize.sendKeys(Asize);
			System.out.println(" Size entered");
			Campaign_Status.sendKeys("");
			System.out.println(" No value entered in Campus status");
			String emptyField = getErrorMessage(Campaign_Status);
			System.out.println(" Tooltip for Campus Status: " + emptyField);
			if (emptyField.isEmpty()) {
				System.out.println(" Campaign Status is optional!");
			}
				Submit_button.click();
				System.out.println(" You clicked submit button");
				Alert_Message();
				Stat = false;			
		}
		return Stat;
	}

	public boolean Check_TargerAudience_optional(String name, String Asize) {
		boolean target = false;
		user_on_campaignPage();
		if (WaitUtils.waitForElement(driver, Campaign_Name)) {
			Campaign_Name.sendKeys(name);
			System.out.println(" Name is entered");
			campaignSize.sendKeys(Asize);
			System.out.println(" Size entered");
			targetAudience.sendKeys("");
			System.out.println(" No value entered in targetAudience");
			String empty = getErrorMessage(targetAudience);
			System.out.println(" Tooltip for Campaign Status: " + empty);
			if (empty.isEmpty()) {
				System.out.println(" Campaign target Audience is optional!");
			}
				Submit_button.click();
				System.out.println(" You clicked submit button");
				Alert_Message();
				target = true;			
		}
		return target;
	}

	public boolean check_Description_is_Oprional(String name, String Asize) {
		boolean desc = false;
		user_on_campaignPage();
		if (WaitUtils.waitForElement(driver, Campaign_Name)) {
			Campaign_Name.sendKeys(name);
			System.out.println(" Name is entered");
			campaignSize.sendKeys(Asize);
			System.out.println(" Size entered");
			Description.sendKeys("");
			System.out.println(" No value entered in Description");
			String empty = getErrorMessage(Description);
			System.out.println(" Tooltip for Description: " + empty);
			if (empty.isEmpty()) {
				System.out.println(" Campaign Description is optional!");
			}
				Submit_button.click();
				System.out.println(" You clicked submit button");
				Alert_Message();
				desc = true;			
		}
		return desc;
	}
	
	public boolean check_TargetSize_isPositive(String name, String Nsize) {
		boolean negatSign = false;
		user_on_campaignPage();
		if (WaitUtils.waitForElement(driver, Campaign_Name)) {
			Campaign_Name.sendKeys(name);
			System.out.println(" Name is entered");
			campaignSize.sendKeys(Nsize);
			System.out.println(" Negative Size is entered");			
			String empty = getErrorMessage(campaignSize);
			System.out.println(" Tooltip for negative Size: " + empty);	
	
			if (empty.isEmpty()) {
				System.out.println(" Error!!! Negative Campaign Size is Taken!");
				Submit_button.click();
				System.out.println(" You clicked submit button");
				Alert_Message();
				negatSign = true;	
			}	 else System.out.println(" TargetSize takes only positive numbers!");
		} 
		return negatSign;
	}
		
	
	public void Edit_Campaign_Name(WebDriver driver, String Uname) {
		if (WaitUtils.waitForElement(driver,Campaign_label)) {
			System.out.println("you are on Campaign Page");
			driver.manage().window().maximize();
		    }
			WaitUtils.waitForElement(driver, editBtn);
			editBtn.click();	
			System.out.println(" Edit button clicked");
			WaitUtils.waitForElement(driver, Campaign_Name);
			Campaign_Name.click();
			Campaign_Name.clear();
			System.out.println(" Cleared old Campaign name");
			Campaign_Name.sendKeys(Uname);
			System.out.println(" Entered Updated Campaign name");	
			update_Campaign.click();
			System.out.println(" Update Campaign clicked");
			WaitUtils.waitForElement(driver, Campaign_Button);
			System.out.println("you are on Campaign Page");
			Alert_Message();			
		}

	public void Update_Campaign_Status() {
		
	}
}
