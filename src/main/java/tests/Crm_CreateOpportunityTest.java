package tests;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import constants.FileConstants;
import pages.CRM_LeadsPage;
import pages.CRM_OpportunitiesPage;
import utils.CommonUtils;
import utils.ExcelUtils;
import utils.FileUtils;
import utils.WaitUtils;

public class Crm_CreateOpportunityTest extends BaseTest {
	public static Logger logger = LogManager.getLogger("Crm_CreateOpportunityTest");

	@Test(dataProvider = "opportunityData", dataProviderClass = CommonUtils.class, enabled = false)
	public void createOpportunityWithMandatoryFields(Map<String, String> data)
			throws InterruptedException, FileNotFoundException, IOException {
		CRM_OpportunitiesPage oppPage = hp.clickOpportunities();

		oppPage.clickCreateOpportunity();
		logger.info("Create Opportunity button is clicked");

		String oppName = data.get("Opportunity Name");
		String amount = data.get("Amount");
		String businessType = data.get("Business Type");
		String nextStep = data.get("Next Step");
		String salesStage = data.get("Sales Stage");
		String lead = data.get("Lead");

		// fill the form using Page Object methods
		oppPage.enterOpportunityName(oppName);
		logger.info("Opportunity name is entered");

		oppPage.enterAmount(amount);
		logger.info("Amount is entered");

		oppPage.enterBusinessType(businessType);
		logger.info("Business type is entered");

		oppPage.enterNextStep(nextStep);
		logger.info("Next step is entered");

		oppPage.enterSalesStage(salesStage);
		logger.info("Sales stage is entered");

		String value = FileUtils.readOpportunitiesPropertiesFile("search.dropdown.value2");

		oppPage.selectLead(value, lead);
		logger.info("lead is selected");

		oppPage.clickCreateOpportunityInForm();
		logger.info("opportunity is created");

		// validate Opportunity created
		Assert.assertTrue(oppPage.verifyOpportunityCreatedWithMandatoryFields(oppName), "Opportunity Creation failed.");
	}

	@Test(dataProvider = "tc2Data", dataProviderClass = CommonUtils.class, enabled = false)
	public void createOpportunityWithAllFields(Map<String, String> data) throws FileNotFoundException, IOException {
		CRM_OpportunitiesPage oppPage = hp.clickOpportunities();
		oppPage.clickCreateOpportunity();
		logger.info("Create Opportunity button is clicked");
		String oppName = data.get("Opportunity Name");
		String amount = data.get("Amount");
		String businessType = data.get("Business Type");
		String expectedClosedate = data.get("Expected Close Date");
		String assignedTo = data.get("Assigned To");
		String probability = data.get("Probability");
		String nextStep = data.get("Next Step");
		String salesStage = data.get("Sales Stage");
		String lead = data.get("Lead");
		String description = data.get("Description");

		// fill the form using Page Object methods
		oppPage.enterOpportunityName(oppName);
		logger.info("Opportunity name is entered");

		oppPage.enterAmount(amount);
		logger.info("Amount is entered");

		oppPage.enterBusinessType(businessType);
		logger.info("Business type is entered");

		oppPage.enterExpectedCloseDate(expectedClosedate);
		logger.info("expected close date is entered");

		oppPage.enterAssignedTo(assignedTo);
		logger.info("Assigned to is entered");

		oppPage.enterProbability(probability);
		logger.info("Probability is entered");

		oppPage.enterNextStep(nextStep);
		logger.info("Next step is entered");

		oppPage.enterSalesStage(salesStage);
		logger.info("Sales stage is entered");

		String value = FileUtils.readOpportunitiesPropertiesFile("search.dropdown.value2");
		oppPage.selectLead(value, lead);
		logger.info("lead is selected");

		oppPage.enterDescription(description);
		logger.info("description is entered");

		oppPage.clickCreateOpportunityInForm();
		logger.info("opportunity is created");

		// validate Opportunity created
		Assert.assertTrue(oppPage.verifyopportunityCreatedWithAllFields(oppName), "Opportunity Creation failed.");

	}

	@Test(dataProvider = "allOpportunitiesData", dataProviderClass = CommonUtils.class, enabled = false)
	public void verifyOpportunityIdIsAutoGeneratedAndUnique(List<Map<String, String>> dataList)
			throws FileNotFoundException, IOException {
		CRM_OpportunitiesPage oppPage = hp.clickOpportunities();
		String oppId1 = "", oppId2 = "";
		logger.info("Create Opportunity button is clicked");
		for (int i = 0; i < 2; i++) { // Only first 2 rows

			oppPage.clickCreateOpportunity();

			Map<String, String> data = dataList.get(i);

			String oppName = data.get("Opportunity Name");
			String amount = data.get("Amount");
			String businessType = data.get("Business Type");
			String nextStep = data.get("Next Step");
			String salesStage = data.get("Sales Stage");
			String lead = data.get("Lead");

// fill the form using Page Object methods
			oppPage.enterOpportunityName(oppName);
			logger.info("Opportunity name is entered");

			oppPage.enterAmount(amount);
			logger.info("Amount is entered");

			oppPage.enterBusinessType(businessType);
			logger.info("Business type is entered");

			oppPage.enterNextStep(nextStep);
			logger.info("Next step is entered");

			oppPage.enterSalesStage(salesStage);
			logger.info("Sales stage is entered");

			String value = FileUtils.readOpportunitiesPropertiesFile("search.dropdown.value2");
			oppPage.selectLead(value, lead);
			logger.info("lead is selected");

			oppPage.clickCreateOpportunityInForm();
			logger.info("opportunity is created");

			oppPage.waitForOpportunityListOrSuccessMessage();
			logger.info("Success message is appeared");

			String currentId = oppPage.getOpportunityId();
			logger.info("Opportunity ID " + (i + 1) + ": " + currentId);

			Assert.assertNotNull(currentId, "Opportunity ID is null");
			Assert.assertFalse(currentId.isEmpty(), "OpportunityId is empty");
			Assert.assertFalse(oppPage.isOpportunityIdIsEditable(), "Opportunity id field should be non-editable");
			hp.clickOpportunities();

			oppPage.waitForSuccessMessageToDisappear();

			if (i == 0) {
				oppId1 = currentId;
			} else
				oppId2 = currentId;
		}

		Assert.assertNotEquals(oppId1, oppId2, "Opportunity IDs should be unique");

	}

	@Test(dataProvider = "tc3Data", dataProviderClass = CommonUtils.class, enabled = false)
	public void VerifyProbabilityDefaultsToZeroWhenBlank(Map<String, String> data)
			throws FileNotFoundException, IOException {
		CRM_OpportunitiesPage oppPage = hp.clickOpportunities();
		oppPage.clickCreateOpportunity();
		logger.info("Create Opportunity button is clicked");
		String oppName = data.get("Opportunity Name");
		String amount = data.get("Amount");
		String businessType = data.get("Business Type");
		String nextStep = data.get("Next Step");
		String salesStage = data.get("Sales Stage");
		String lead = data.get("Lead");
		// fill the form using Page Object methods
		oppPage.enterOpportunityName(oppName);
		logger.info("Opportunity name is entered");

		oppPage.enterAmount(amount);
		logger.info("Amount is entered");

		oppPage.enterBusinessType(businessType);
		logger.info("Business type is entered");

		oppPage.enterNextStep(nextStep);
		logger.info("Next step is entered");

		oppPage.enterSalesStage(salesStage);
		logger.info("Sales stage is entered");

		String value = FileUtils.readOpportunitiesPropertiesFile("search.dropdown.value2");

		oppPage.selectLead(value, lead);
		logger.info("lead is selected");

		oppPage.clickCreateOpportunityInForm();
		logger.info("opportunity is created with blank Probability");

		// Wait for success and navigate to details or list page
		oppPage.waitForOpportunityListOrSuccessMessage();

		// Get the displayed value of "Probability" from the opportunity details
		String actualProbability = oppPage.getProbabilityValue(); // implement this method if needed
		logger.info("Probability field value: " + actualProbability);

		// Assert it is 0
		Assert.assertEquals(actualProbability, "0", "Probability should default to 0 when left blank");
	}

	@Test(dataProvider = "tc3Data", dataProviderClass = CommonUtils.class, enabled = false)
	public void VerifyAmountFieldValidation(Map<String, String> data) throws FileNotFoundException, IOException {
		CRM_OpportunitiesPage oppPage = hp.clickOpportunities();
		oppPage.clickCreateOpportunity();
		logger.info("Create Opportunity button is clicked");
		String oppName = data.get("Opportunity Name");
		String businessType = data.get("Business Type");
		String nextStep = data.get("Next Step");
		String salesStage = data.get("Sales Stage");
		String lead = data.get("Lead");

		// fill the form using Page Object methods without amount field
		oppPage.enterOpportunityName(oppName);
		logger.info("Opportunity name is entered");

		oppPage.enterBusinessType(businessType);
		logger.info("Business type is entered");

		oppPage.enterNextStep(nextStep);
		logger.info("Next step is entered");

		oppPage.enterSalesStage(salesStage);
		logger.info("Sales stage is entered");

		String value = FileUtils.readOpportunitiesPropertiesFile("search.dropdown.value2");

		oppPage.selectLead(value, lead);
		logger.info("lead is selected");

		// Step1: left amount field blank
		oppPage.enterAmount("");// simulate blank
		logger.info("Amount field is left blank");

		oppPage.clickCreateOpportunityInForm();
		logger.info("Create Opportunity button is clicked");

		String blankAmountError = oppPage.getAmountErrorMessage();
		Assert.assertEquals(blankAmountError, "Please fill out this field.", "Blank Amount error not shown properly");
		logger.info("Error is: " +blankAmountError );

		// === Step 2: Enter non-numeric amount ===
		oppPage.enterAmount("e");
		logger.info("Alphabet 'e' is entered in Amount field");

		oppPage.clickCreateOpportunityInForm();
		logger.info("Create Opportunity button is clicked");

		String invalidAmountError = oppPage.getAmountErrorMessage(); // reuse same method
		Assert.assertEquals(invalidAmountError.trim(), "Please enter a number.",
				"Non-numeric Amount error not shown properly");
		logger.info("Error is: " +invalidAmountError );


		logger.info("Amount field validation tested successfully");

	}

	@Test(dataProvider = "tc3Data", dataProviderClass = CommonUtils.class, enabled = false)
	public void VerifyProbablityAcceptsNumericValues(Map<String, String> data)
			throws FileNotFoundException, IOException {
		CRM_OpportunitiesPage oppPage = hp.clickOpportunities();
		oppPage.clickCreateOpportunity();
		logger.info("Create Opportunity button is clicked");
		String oppName = data.get("Opportunity Name");
		String amount = data.get("Amount");
		String businessType = data.get("Business Type");
		String nextStep = data.get("Next Step");
		String salesStage = data.get("Sales Stage");
		String lead = data.get("Lead");

		// fill the form using Page Object methods without amount field
		oppPage.enterOpportunityName(oppName);
		logger.info("Opportunity name is entered");

		oppPage.enterBusinessType(businessType);
		logger.info("Business type is entered");

		oppPage.enterAmount(amount);
		logger.info("Amount is entered");

		oppPage.enterNextStep(nextStep);
		logger.info("Next step is entered");

		oppPage.enterSalesStage(salesStage);
		logger.info("Sales stage is entered");

		String value = FileUtils.readOpportunitiesPropertiesFile("search.dropdown.value2");

		oppPage.selectLead(value, lead);
		logger.info("lead is selected");

		// Enter non-numeric value in probability field ===
		oppPage.enterProbability("e");
		logger.info("Alphabet 'e' is entered in Probability field");

		oppPage.clickCreateOpportunityInForm();
		logger.info("Create Opportunity button is clicked");

		String invalidProbabilityError = oppPage.getProbabilityErrorMessage();// reuse same method
		Assert.assertEquals(invalidProbabilityError.trim(), "Please enter a number.",
				"Non-numeric Probability error not shown properly");
		logger.info("Error is: " +invalidProbabilityError );


		logger.info("Probablity field validation tested successfully");

	}

	@Test(dataProvider = "tc4Data", dataProviderClass = CommonUtils.class, enabled = false)
	public void VerifyBlankOpportunityNameField(Map<String, String> data) throws FileNotFoundException, IOException {
		CRM_OpportunitiesPage oppPage = hp.clickOpportunities();
		oppPage.clickCreateOpportunity();
		logger.info("Create Opportunity button is clicked");
		String oppName = data.get("Opportunity Name");
		String amount = data.get("Amount");
		String businessType = data.get("Business Type");
		String nextStep = data.get("Next Step");
		String salesStage = data.get("Sales Stage");
		String lead = data.get("Lead");

		// fill the form using Page Object methods without amount field
		oppPage.enterOpportunityName(oppName);
		logger.info("Opportunity name is left blank");

		oppPage.enterBusinessType(businessType);
		logger.info("Business type is entered");

		oppPage.enterAmount(amount);
		logger.info("Amount is entered");

		oppPage.enterNextStep(nextStep);
		logger.info("Next step is entered");

		oppPage.enterSalesStage(salesStage);
		logger.info("Sales stage is entered");

		String value = FileUtils.readOpportunitiesPropertiesFile("search.dropdown.value2");

		oppPage.selectLead(value, lead);
		logger.info("lead is selected");

		oppPage.clickCreateOpportunityInForm();
		logger.info("Create Opportunity button is clicked");

		String blankOpportunityNameError = oppPage.getOpportunityNameErrorMessage();
		Assert.assertEquals(blankOpportunityNameError, "Please fill out this field.",
				"Blank Opportunity Name error not shown properly");
		logger.info("Error is: " +blankOpportunityNameError );
		logger.info("Opportunity Name field validation tested successfully");

	}
	@Test(dataProvider = "tc5Data", dataProviderClass = CommonUtils.class, enabled = false)
	public void VerifyBlankBusinessTypeField(Map<String, String> data) throws FileNotFoundException, IOException {
		CRM_OpportunitiesPage oppPage = hp.clickOpportunities();
		oppPage.clickCreateOpportunity();
		logger.info("Create Opportunity button is clicked");
		String oppName = data.get("Opportunity Name");
		String amount = data.get("Amount");
		String businessType = data.get("Business Type");
		String nextStep = data.get("Next Step");
		String salesStage = data.get("Sales Stage");
		String lead = data.get("Lead");

		// fill the form using Page Object methods without amount field
		oppPage.enterOpportunityName(oppName);
		logger.info("Opportunity name is entered");

		oppPage.enterBusinessType(businessType);
		logger.info("Business type is left blank");

		oppPage.enterAmount(amount);
		logger.info("Amount is entered");

		oppPage.enterNextStep(nextStep);
		logger.info("Next step is entered");

		oppPage.enterSalesStage(salesStage);
		logger.info("Sales stage is entered");

		String value = FileUtils.readOpportunitiesPropertiesFile("search.dropdown.value2");

		oppPage.selectLead(value, lead);
		logger.info("lead is selected");

		oppPage.clickCreateOpportunityInForm();
		logger.info("Create Opportunity button is clicked");

		String blankBusinessTypeError = oppPage.getBusinessTypeErrorMessage();
		Assert.assertEquals(blankBusinessTypeError, "Please fill out this field.",
				"Blank Opportunity Name error not shown properly");
		logger.info("Error is: " +blankBusinessTypeError );
		logger.info("Business Type field validation tested successfully");

	}
	@Test(dataProvider = "tc6Data", dataProviderClass = CommonUtils.class, enabled = false)
	public void VerifyBlankNextStepField(Map<String, String> data) throws FileNotFoundException, IOException {
		CRM_OpportunitiesPage oppPage = hp.clickOpportunities();
		oppPage.clickCreateOpportunity();
		logger.info("Create Opportunity button is clicked");
		String oppName = data.get("Opportunity Name");
		String amount = data.get("Amount");
		String businessType = data.get("Business Type");
		String nextStep = data.get("Next Step");
		String salesStage = data.get("Sales Stage");
		String lead = data.get("Lead");

		// fill the form using Page Object methods without amount field
		oppPage.enterOpportunityName(oppName);
		logger.info("Opportunity name is entered");

		oppPage.enterBusinessType(businessType);
		logger.info("Business type is entered");

		oppPage.enterAmount(amount);
		logger.info("Amount is entered");

		oppPage.enterNextStep(nextStep);
		logger.info("Next step is left blank");

		oppPage.enterSalesStage(salesStage);
		logger.info("Sales stage is entered");

		String value = FileUtils.readOpportunitiesPropertiesFile("search.dropdown.value2");

		oppPage.selectLead(value, lead);
		logger.info("lead is selected");

		oppPage.clickCreateOpportunityInForm();
		logger.info("Create Opportunity button is clicked");

		String blankNextStepFieldError = oppPage.getNextStepErrorMessage();
		Assert.assertEquals(blankNextStepFieldError, "Please fill out this field.",
				"Blank Next step error not shown properly");
		logger.info("Error is: " +blankNextStepFieldError );
		logger.info("Next Step field validation tested successfully");

	}
	@Test(dataProvider = "tc7Data", dataProviderClass = CommonUtils.class, enabled = false)
	public void VerifyBlankSalesStageField(Map<String, String> data) throws FileNotFoundException, IOException {
		CRM_OpportunitiesPage oppPage = hp.clickOpportunities();
		oppPage.clickCreateOpportunity();
		logger.info("Create Opportunity button is clicked");
		String oppName = data.get("Opportunity Name");
		String amount = data.get("Amount");
		String businessType = data.get("Business Type");
		String nextStep = data.get("Next Step");
		String salesStage = data.get("Sales Stage");
		String lead = data.get("Lead");

		// fill the form using Page Object methods without amount field
		oppPage.enterOpportunityName(oppName);
		logger.info("Opportunity name is entered");

		oppPage.enterBusinessType(businessType);
		logger.info("Business type is entered");

		oppPage.enterAmount(amount);
		logger.info("Amount is entered");

		oppPage.enterNextStep(nextStep);
		logger.info("Next step is entered");

		oppPage.enterSalesStage(salesStage);
		logger.info("Sales stage is left blank");

		String value = FileUtils.readOpportunitiesPropertiesFile("search.dropdown.value2");

		oppPage.selectLead(value, lead);
		logger.info("lead is selected");

		oppPage.clickCreateOpportunityInForm();
		logger.info("Create Opportunity button is clicked");

		String blankSalesStageFieldError = oppPage.getSalesStageErrorMessage();
		Assert.assertEquals(blankSalesStageFieldError, "Please fill out this field.",
				"Blank Sales Stage error not shown properly");
		logger.info("Error is: " +blankSalesStageFieldError );
		logger.info("Sales Stage field validation tested successfully");

	}
	@Test(dataProvider = "tc8Data", dataProviderClass = CommonUtils.class, enabled = true)
	public void VerifyBlankLeadField(Map<String, String> data) throws FileNotFoundException, IOException {
		CRM_OpportunitiesPage oppPage = hp.clickOpportunities();
		oppPage.clickCreateOpportunity();
		logger.info("Create Opportunity button is clicked");
		String oppName = data.get("Opportunity Name");
		String amount = data.get("Amount");
		String businessType = data.get("Business Type");
		String nextStep = data.get("Next Step");
		String salesStage = data.get("Sales Stage");

		// fill the form using Page Object methods without amount field
		oppPage.enterOpportunityName(oppName);
		logger.info("Opportunity name is entered");

		oppPage.enterBusinessType(businessType);
		logger.info("Business type is entered");

		oppPage.enterAmount(amount);
		logger.info("Amount is entered");

		oppPage.enterNextStep(nextStep);
		logger.info("Next step is entered");

		oppPage.enterSalesStage(salesStage);
		logger.info("Sales stage is entered");

		oppPage.clickCreateOpportunityInForm();
		logger.info("Create Opportunity button is clicked");

		String blankLeadFieldError = oppPage.getLeadErrorMessage();
		Assert.assertEquals(blankLeadFieldError, "Please select a Lead before submitting.",
				"Blank Lead error not shown properly");
		logger.info("Error is: " +blankLeadFieldError );
		logger.info("Lead field validation tested successfully");
	}
	
}
